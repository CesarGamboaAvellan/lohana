{"ast":null,"code":"import _objectSpread from \"/Users/ff_cesar/Documents/stupid stuff/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/ff_cesar/Documents/stupid stuff/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ff_cesar/Documents/stupid stuff/src/index.js\";\nimport { render } from 'react-dom';\nimport React, { useState } from 'react';\nimport { useSprings, animated, interpolate } from 'react-spring';\nimport { useGesture } from 'react-use-gesture';\nimport './styles.css';\nimport One from '../src/1.jpg';\nconst cards = [One, 'https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg', 'https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg', 'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg', 'https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg', 'https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg']; // These two are just helpers, they curate spring data, values that are later being interpolated into css\n\nconst to = i => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\n\nconst from = i => ({\n  x: 0,\n  rot: 0,\n  scale: 1.5,\n  y: -1000\n}); // This is being used down there in the view, it interpolates rotation and scale into a css transform\n\n\nconst trans = (r, s) => \"perspective(1500px) rotateX(30deg) rotateY(\".concat(r / 10, \"deg) rotateZ(\").concat(r, \"deg) scale(\").concat(s, \")\");\n\nfunction Deck() {\n  const _useState = useState(() => new Set()),\n        _useState2 = _slicedToArray(_useState, 1),\n        gone = _useState2[0]; // The set flags all the cards that are flicked out\n\n\n  const _useSprings = useSprings(cards.length, i => _objectSpread({}, to(i), {\n    from: from(i)\n  })),\n        _useSprings2 = _slicedToArray(_useSprings, 2),\n        props = _useSprings2[0],\n        set = _useSprings2[1]; // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n\n\n  const bind = useGesture(({\n    args: [index],\n    down,\n    delta: [xDelta],\n    distance,\n    direction: [xDir],\n    velocity\n  }) => {\n    const trigger = velocity > 0.2; // If you flick hard enough it should trigger the card to fly out\n\n    const dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n\n    if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n\n    set(i => {\n      if (index !== i) return; // We're only interested in changing spring-data for the current spring\n\n      const isGone = gone.has(index);\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n\n      const scale = down ? 1.1 : 1; // Active cards lift up a bit\n\n      return {\n        x,\n        rot,\n        scale,\n        delay: undefined,\n        config: {\n          friction: 50,\n          tension: down ? 800 : isGone ? 200 : 500\n        }\n      };\n    });\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600);\n  }); // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n\n  return props.map(({\n    x,\n    y,\n    rot,\n    scale\n  }, i) => /*#__PURE__*/React.createElement(animated.div, {\n    key: i,\n    style: {\n      transform: interpolate([x, y], (x, y) => \"translate3d(\".concat(x, \"px,\").concat(y, \"px,0)\"))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(animated.div, Object.assign({}, bind(i), {\n    style: {\n      transform: interpolate([rot, scale], trans),\n      backgroundImage: \"url(\".concat(cards[i], \")\")\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }))));\n}\n\nrender( /*#__PURE__*/React.createElement(Deck, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 8\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/ff_cesar/Documents/stupid stuff/src/index.js"],"names":["render","React","useState","useSprings","animated","interpolate","useGesture","One","cards","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","Deck","Set","gone","length","props","set","bind","args","index","down","delta","xDelta","distance","direction","xDir","velocity","trigger","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","transform","backgroundImage","document","getElementById"],"mappings":"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","sourcesContent":["import { render } from 'react-dom'\nimport React, { useState } from 'react'\nimport { useSprings, animated, interpolate } from 'react-spring'\nimport { useGesture } from 'react-use-gesture'\nimport './styles.css'\nimport One from '../src/1.jpg'\n\nconst cards = [\n    One,\n    'https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg',\n    'https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg',\n    'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg',\n    'https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg',\n    'https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg'\n]\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\n\nfunction Deck() {\n    const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\n    const [props, set] = useSprings(cards.length, i => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\n    // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n    const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\n        const trigger = velocity > 0.2 // If you flick hard enough it should trigger the card to fly out\n        const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\n        if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n        set(i => {\n            if (index !== i) return // We're only interested in changing spring-data for the current spring\n            const isGone = gone.has(index)\n            const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\n            const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\n            const scale = down ? 1.1 : 1 // Active cards lift up a bit\n            return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\n        })\n        if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600)\n    })\n    // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n    return props.map(({ x, y, rot, scale }, i) => (\n        <animated.div key={i} style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }}>\n            {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n            <animated.div {...bind(i)} style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${cards[i]})` }} />\n        </animated.div>\n    ))\n}\n\nrender(<Deck />, document.getElementById('root'))\n"]},"metadata":{},"sourceType":"module"}